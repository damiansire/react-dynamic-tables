{"version":3,"file":"Table.stories-0cd9db18.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/components/Table/libs/tableHelp.ts","../../src/components/Table/useTableSelection.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","export const getCell = (\r\n  tableRef: React.RefObject<HTMLTableElement>,\r\n  rowId: string,\r\n  columnId: string\r\n): HTMLTableCellElement | null => {\r\n  return tableRef.current?.querySelector(\r\n    `tr[row-id=\"${rowId}\"] td[column-id=\"${columnId}\"]`\r\n  ) as HTMLTableCellElement | null;\r\n};\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Header } from \"./interfaces/Header\";\r\nimport { Row } from \"./interfaces/Row\";\r\nimport { getCell } from \"./libs/tableHelp\";\r\n\r\ninterface SelectedCell {\r\n  trId: string | null;\r\n  columnId: string | null;\r\n}\r\n\r\nenum MovementKey {\r\n  ArrowDown = \"ArrowDown\",\r\n  ArrowUp = \"ArrowUp\",\r\n  ArrowLeft = \"ArrowLeft\",\r\n  ArrowRight = \"ArrowRight\",\r\n}\r\n\r\nconst isMovementKey = (keyEvent: string) => {\r\n  return Object.values(MovementKey).includes(keyEvent);\r\n};\r\n\r\nexport const useTableSelection = (\r\n  rows: Row[],\r\n  headers: Header[],\r\n  tableRef: React.RefObject<HTMLTableElement>\r\n): [\r\n  SelectedCell,\r\n  (event: KeyboardEvent) => void,\r\n  (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void\r\n] => {\r\n  const [selectedCell, setSelectedCell] = useState<SelectedCell>({\r\n    trId: null,\r\n    columnId: null,\r\n  });\r\n\r\n  const getNextIndex = useCallback(\r\n    (\r\n      currentRowIndex: number,\r\n      eventKey: string,\r\n      rowCount: number,\r\n      currentColumnId: string | null,\r\n      headers: Header[]\r\n    ) => {\r\n      const columnIndex = headers.findIndex(\r\n        (x) => x.attributeName === currentColumnId\r\n      );\r\n      const columnLength = headers.length;\r\n      let newColumnIndex;\r\n      let nextRowIndex;\r\n\r\n      if (eventKey === MovementKey.ArrowUp) {\r\n        nextRowIndex = (currentRowIndex - 1 + rowCount) % rowCount;\r\n        window.scrollBy(0, -50);\r\n      } else if (eventKey === MovementKey.ArrowDown) {\r\n        nextRowIndex = (currentRowIndex + 1) % rowCount;\r\n        window.scrollBy(0, 50);\r\n      } else if (eventKey === MovementKey.ArrowLeft) {\r\n        newColumnIndex = (columnIndex - 1 + columnLength) % columnLength;\r\n      } else if (eventKey === MovementKey.ArrowRight) {\r\n        newColumnIndex = (columnIndex + 1) % columnLength;\r\n      }\r\n\r\n      const columnIdFinal =\r\n        newColumnIndex !== undefined\r\n          ? headers[newColumnIndex].attributeName\r\n          : currentColumnId;\r\n\r\n      const finalIndex =\r\n        nextRowIndex !== undefined ? nextRowIndex : currentRowIndex;\r\n      return { nextRowIndex: finalIndex, columnId: columnIdFinal };\r\n    },\r\n    [headers]\r\n  );\r\n\r\n  const handleKey = useCallback(\r\n    (event: KeyboardEvent) => {\r\n      if (isMovementKey(event.key) && selectedCell.trId !== null) {\r\n        event.preventDefault();\r\n        const rowIndex = rows.findIndex(\r\n          (expense) => expense.id === selectedCell.trId\r\n        );\r\n        const { nextRowIndex, columnId } = getNextIndex(\r\n          rowIndex,\r\n          event.key,\r\n          rows.length,\r\n          selectedCell.columnId,\r\n          headers\r\n        );\r\n\r\n        const nextExpense = rows[nextRowIndex];\r\n        const nextCell = getCell(tableRef, nextExpense.id, columnId);\r\n\r\n        if (nextCell) {\r\n          nextCell.focus();\r\n          setSelectedCell({ trId: nextExpense.id, columnId });\r\n        }\r\n      }\r\n    },\r\n    [rows, selectedCell]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKey);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKey);\r\n    };\r\n  }, [handleKey]);\r\n\r\n  const handleBodyTrClick = useCallback(\r\n    (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\r\n      const trId = event.currentTarget.getAttribute(\"row-id\");\r\n      const columnId = (event.target as HTMLElement).getAttribute(\"column-id\");\r\n      setSelectedCell({ columnId, trId });\r\n    },\r\n    []\r\n  );\r\n\r\n  return [selectedCell, handleKey, handleBodyTrClick];\r\n};\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./table.css\";\r\nimport { Row } from \"./interfaces/Row\";\r\nimport { useTableSelection } from \"./useTableSelection\";\r\nimport { Header } from \"./interfaces/Header\";\r\n\r\ninterface TableProps {\r\n  headers: Header[];\r\n  rows: Row[];\r\n}\r\n\r\ninterface ICell {\r\n  value: string;\r\n  columnName: string;\r\n  isSelected: boolean;\r\n}\r\n\r\ninterface NewCell {\r\n  trId: string;\r\n  columnId: string;\r\n}\r\n\r\nconst Cell = ({ value, isSelected, columnName }: ICell) => (\r\n  <td className={isSelected ? \"selected\" : \"\"} column-id={columnName}>\r\n    {value}\r\n  </td>\r\n);\r\n\r\nconst TableComponent = ({ rows, headers }: TableProps) => {\r\n  // State para manejar el contenido editado de la celda\r\n  const [editedCellValues, setEditedCellValues] = useState<{\r\n    [key: string]: string;\r\n  }>({});\r\n\r\n  const tableRef = useRef<HTMLTableElement>(null);\r\n\r\n  const [selectedCell, handleKey, handleBodyTrClick] = useTableSelection(\r\n    rows,\r\n    headers,\r\n    tableRef\r\n  );\r\n\r\n  const isSelectedCell = useCallback(\r\n    (cellId: string, expenseId: string) => {\r\n      return (\r\n        selectedCell.trId === expenseId && selectedCell.columnId === cellId\r\n      );\r\n    },\r\n    [selectedCell]\r\n  );\r\n\r\n  const renderRow = useCallback(\r\n    (row: Row) => {\r\n      return (\r\n        <tr\r\n          key={row.id}\r\n          row-id={row.id}\r\n          onClick={handleBodyTrClick}\r\n          className={isSelectedCell(\"\", row.id) ? \"selected\" : \"\"}\r\n        >\r\n          {headers.map((data) => {\r\n            let cellValue = row[data.attributeName];\r\n            if (editedCellValues[row.id]) {\r\n              cellValue = editedCellValues[row.id][data.attributeName];\r\n            }\r\n            return (\r\n              <Cell\r\n                key={data.attributeName}\r\n                value={cellValue}\r\n                columnName={data.attributeName}\r\n                isSelected={isSelectedCell(data.attributeName, row.id)}\r\n              />\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    },\r\n    [headers, isSelectedCell, handleBodyTrClick]\r\n  );\r\n\r\n  const isWritableCharacter = (key: string) => {\r\n    // Comprueba si la key es una letra (mayúscula o minúscula), un símbolo o un número\r\n    const letrasSimbolosYnumeros =\r\n      /^[A-Za-z0-9!\"#$%&'()*+,-./:;<=>?@[\\\\\\]^_`{|}~]$/;\r\n    return letrasSimbolosYnumeros.test(key);\r\n  };\r\n\r\n  //Handle edit\r\n  useEffect(() => {\r\n    function pressKey({ key }: { key: string }) {\r\n      if (\r\n        isWritableCharacter(key) &&\r\n        selectedCell.trId &&\r\n        selectedCell.columnId\r\n      ) {\r\n        setEditedCellValues((lastCellValues) => {\r\n          // Copia inmutable del objeto de valores editados\r\n          const newCellValues = { ...lastCellValues };\r\n\r\n          // Obtiene la fila actual\r\n          const currentRow = rows.find((x) => x.id === selectedCell.trId);\r\n\r\n          // Si la celda está en la lista de filas modificadas, toma el valor de allí\r\n          if (newCellValues.hasOwnProperty(selectedCell.trId)) {\r\n            let currentValue =\r\n              newCellValues[selectedCell.trId][selectedCell.columnId];\r\n            const newRowValue = currentValue + key;\r\n            newCellValues[selectedCell.trId][selectedCell.columnId] =\r\n              newRowValue;\r\n          } else {\r\n            let currentValue = currentRow[selectedCell.columnId];\r\n            const newRowValue = currentValue + key;\r\n            newCellValues[selectedCell.trId] = { ...currentRow };\r\n            newCellValues[selectedCell.trId][selectedCell.columnId] =\r\n              newRowValue;\r\n          }\r\n\r\n          return newCellValues;\r\n        });\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", pressKey);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", pressKey);\r\n    };\r\n  }, [selectedCell, editedCellValues, rows]);\r\n\r\n  return (\r\n    <table ref={tableRef}>\r\n      <thead>\r\n        <tr>\r\n          {headers.map((x) => (\r\n            <th key={x.attributeName}>{x.displayText}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{rows.map(renderRow)}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nTableComponent.defaultProps = {\r\n  headers: [],\r\n  rows: [],\r\n};\r\n\r\nexport default TableComponent;\r\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","getCell","tableRef","rowId","columnId","_a","MovementKey","isMovementKey","keyEvent","useTableSelection","rows","headers","selectedCell","setSelectedCell","useState","getNextIndex","useCallback","currentRowIndex","eventKey","rowCount","currentColumnId","columnIndex","x","columnLength","newColumnIndex","nextRowIndex","columnIdFinal","handleKey","event","rowIndex","expense","nextExpense","nextCell","useEffect","handleBodyTrClick","trId","Cell","value","isSelected","columnName","jsx","TableComponent","editedCellValues","setEditedCellValues","useRef","isSelectedCell","cellId","expenseId","renderRow","row","data","cellValue","isWritableCharacter","key","pressKey","lastCellValues","newCellValues","currentRow","newRowValue","jsxs","Table$1"],"mappings":"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","x_google_ignoreList":[0,1]}